import re
import matplotlib.pyplot as plt
import numpy as np
data = """
[Sample{deltaDeg=16.251403808593725, ticks=0, turn=1.0}, Sample{deltaDeg=-0.07211303710941906, ticks=0, turn=-1.0}, Sample{deltaDeg=0.11071777343746977, ticks=0, turn=1.0}, Sample{deltaDeg=-12.25936889648437, ticks=0, turn=-1.0}, Sample{deltaDeg=5.61010742187498, ticks=1, turn=1.0}, Sample{deltaDeg=-0.800140380859358, ticks=1, turn=-1.0}, Sample{deltaDeg=0.4729309082031196, ticks=1, turn=1.0}, Sample{deltaDeg=-1.785217285156252, ticks=1, turn=-1.0}, Sample{deltaDeg=4.252410888671917, ticks=2, turn=1.0}, Sample{deltaDeg=-21.84417724609378, ticks=2, turn=-1.0}, Sample{deltaDeg=4.916595458984367, ticks=2, turn=1.0}, Sample{deltaDeg=-18.180206298828114, ticks=2, turn=-1.0}, Sample{deltaDeg=20.39804077148439, ticks=3, turn=1.0}, Sample{deltaDeg=-35.12435913085938, ticks=3, turn=-1.0}, Sample{deltaDeg=17.304412841796886, ticks=3, turn=1.0}, Sample{deltaDeg=-25.268585205078136, ticks=3, turn=-1.0}, Sample{deltaDeg=26.867645263671893, ticks=4, turn=1.0}, Sample{deltaDeg=-41.92068481445314, ticks=4, turn=-1.0}, Sample{deltaDeg=37.750244140625036, ticks=4, turn=1.0}, Sample{deltaDeg=-38.45922851562501, ticks=4, turn=-1.0}, Sample{deltaDeg=47.045867919921896, ticks=5, turn=1.0}, Sample{deltaDeg=-46.91268920898438, ticks=5, turn=-1.0}, Sample{deltaDeg=47.09887695312502, ticks=5, turn=1.0}, Sample{deltaDeg=-47.71081542968752, ticks=5, turn=-1.0}, Sample{deltaDeg=53.584259033203146, ticks=6, turn=1.0}, Sample{deltaDeg=-66.49119567871092, ticks=6, turn=-1.0}, Sample{deltaDeg=55.523956298828125, ticks=6, turn=1.0}, Sample{deltaDeg=-47.16018676757817, ticks=6, turn=-1.0}, Sample{deltaDeg=75.30911254882811, ticks=7, turn=1.0}, Sample{deltaDeg=-68.64584350585936, ticks=7, turn=-1.0}, Sample{deltaDeg=72.31854248046875, ticks=7, turn=1.0}, Sample{deltaDeg=-66.99307250976565, ticks=7, turn=-1.0}, Sample{deltaDeg=69.35919189453125, ticks=8, turn=1.0}, Sample{deltaDeg=-78.0721435546875, ticks=8, turn=-1.0}, Sample{deltaDeg=81.73925781250001, ticks=8, turn=1.0}, Sample{deltaDeg=-79.3383483886719, ticks=8, turn=-1.0}, Sample{deltaDeg=75.96398925781249, ticks=9, turn=1.0}, Sample{deltaDeg=-89.47602844238281, ticks=9, turn=-1.0}, Sample{deltaDeg=94.27059936523438, ticks=9, turn=1.0}, Sample{deltaDeg=-91.1961669921875, ticks=9, turn=-1.0}, Sample{deltaDeg=96.62704467773439, ticks=10, turn=1.0}, Sample{deltaDeg=-93.890869140625, ticks=10, turn=-1.0}, Sample{deltaDeg=98.11618041992188, ticks=10, turn=1.0}, Sample{deltaDeg=-95.3665771484375, ticks=10, turn=-1.0}, Sample{deltaDeg=106.00357055664064, ticks=11, turn=1.0}, Sample{deltaDeg=-104.61943054199216, ticks=11, turn=-1.0}, Sample{deltaDeg=106.87139892578126, ticks=11, turn=1.0}, Sample{deltaDeg=-99.73887634277347, ticks=11, turn=-1.0}, Sample{deltaDeg=117.32698059082034, ticks=12, turn=1.0}, Sample{deltaDeg=-123.42370605468749, ticks=12, turn=-1.0}, Sample{deltaDeg=118.60891723632815, ticks=12, turn=1.0}, Sample{deltaDeg=-122.16773986816408, ticks=12, turn=-1.0}, Sample{deltaDeg=140.86657714843753, ticks=13, turn=1.0}, Sample{deltaDeg=-127.02496337890624, ticks=13, turn=-1.0}, Sample{deltaDeg=135.3618316650391, ticks=13, turn=1.0}, Sample{deltaDeg=-124.51287841796875, ticks=13, turn=-1.0}, Sample{deltaDeg=147.71585083007815, ticks=14, turn=1.0}, Sample{deltaDeg=-144.85035705566406, ticks=14, turn=-1.0}, Sample{deltaDeg=136.22634887695315, ticks=14, turn=1.0}, Sample{deltaDeg=-130.17784118652344, ticks=14, turn=-1.0}, Sample{deltaDeg=150.13606262207028, ticks=15, turn=1.0}, Sample{deltaDeg=-142.47007751464844, ticks=15, turn=-1.0}, Sample{deltaDeg=146.57920837402344, ticks=15, turn=1.0}, Sample{deltaDeg=-145.7546081542969, ticks=15, turn=-1.0}, Sample{deltaDeg=161.90914916992188, ticks=16, turn=1.0}, Sample{deltaDeg=-148.9191436767578, ticks=16, turn=-1.0}, Sample{deltaDeg=166.6190338134766, ticks=16, turn=1.0}, Sample{deltaDeg=-153.86227416992185, ticks=16, turn=-1.0}, Sample{deltaDeg=177.61599731445312, ticks=17, turn=1.0}, Sample{deltaDeg=-170.3842315673828, ticks=17, turn=-1.0}, Sample{deltaDeg=153.05650329589847, ticks=17, turn=1.0}, Sample{deltaDeg=-176.57733154296875, ticks=17, turn=-1.0}, Sample{deltaDeg=177.22877502441406, ticks=18, turn=1.0}, Sample{deltaDeg=-176.28407287597656, ticks=18, turn=-1.0}, Sample{deltaDeg=175.81140899658206, ticks=18, turn=1.0}, Sample{deltaDeg=-250.01119995117185, ticks=18, turn=-1.0}, Sample{deltaDeg=201.35667419433594, ticks=19, turn=1.0}, Sample{deltaDeg=-174.29087829589844, ticks=19, turn=-1.0}, Sample{deltaDeg=194.81898498535156, ticks=19, turn=1.0}, Sample{deltaDeg=-193.91673278808594, ticks=19, turn=-1.0}, Sample{deltaDeg=199.21778869628906, ticks=20, turn=1.0}, Sample{deltaDeg=-193.96578979492185, ticks=20, turn=-1.0}, Sample{deltaDeg=199.47573852539062, ticks=20, turn=1.0}, Sample{deltaDeg=-193.82116699218747, ticks=20, turn=-1.0}, Sample{deltaDeg=201.57209777832028, ticks=21, turn=1.0}, Sample{deltaDeg=-221.3146362304687, ticks=21, turn=-1.0}, Sample{deltaDeg=215.07362365722656, ticks=21, turn=1.0}, Sample{deltaDeg=-195.40608215332028, ticks=21, turn=-1.0}, Sample{deltaDeg=220.9900665283203, ticks=22, turn=1.0}, Sample{deltaDeg=-215.72846984863278, ticks=22, turn=-1.0}, Sample{deltaDeg=226.09303283691403, ticks=22, turn=1.0}, Sample{deltaDeg=-219.75377655029294, ticks=22, turn=-1.0}, Sample{deltaDeg=230.82855224609372, ticks=23, turn=1.0}, Sample{deltaDeg=-234.0653533935547, ticks=23, turn=-1.0}, Sample{deltaDeg=245.17686462402344, ticks=23, turn=1.0}, Sample{deltaDeg=-228.43931579589844, ticks=23, turn=-1.0}, Sample{deltaDeg=234.61920166015622, ticks=24, turn=1.0}, Sample{deltaDeg=-230.08972167968747, ticks=24, turn=-1.0}, Sample{deltaDeg=245.85300445556635, ticks=24, turn=1.0}, Sample{deltaDeg=-245.0700454711914, ticks=24, turn=-1.0}]
"""
deltaDegs = np.array([float(x) for x in re.findall(r"deltaDeg=([\w.-]+)", data)])
ticks = np.array([float(x) for x in re.findall(r"ticks=([\w.-]+)", data)])
turns = np.array([float(x) for x in re.findall(r"turn=([\w.-]+)", data)])

positive = turns>=0
negative = turns<=0
positive_m, positive_b = np.polyfit(ticks[positive],deltaDegs[positive],1)
negative_m, negative_b = np.polyfit(ticks[negative],deltaDegs[negative],1)

def plt_mxb(m,b):
    data = np.array([np.amin(ticks),np.amax(ticks)])
    plt.plot(data, data*m+b, '--')

print(positive_m,positive_b,negative_m,negative_b)

plt.scatter(ticks,deltaDegs)
plt_mxb(positive_m, positive_b)
plt_mxb(negative_m, negative_b)
plt.show()
