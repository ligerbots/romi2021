import re
import matplotlib.pyplot as plt
import numpy as np
data = """
[Sample{deltaDeg=3.4548034667968732, ticks=0, turn=1.0}, Sample{deltaDeg=-15.222091674804698, ticks=0, turn=-1.0}, Sample{deltaDeg=18.2932586669922, ticks=0, turn=1.0}, Sample{deltaDeg=-5.456298828124998, ticks=0, turn=-1.0}, Sample{deltaDeg=13.12049865722654, ticks=1, turn=1.0}, Sample{deltaDeg=-5.78894805908205, ticks=1, turn=-1.0}, Sample{deltaDeg=13.50608062744141, ticks=1, turn=1.0}, Sample{deltaDeg=-17.171417236328114, ticks=1, turn=-1.0}, Sample{deltaDeg=12.439056396484382, ticks=2, turn=1.0}, Sample{deltaDeg=-17.757781982421886, ticks=2, turn=-1.0}, Sample{deltaDeg=23.549468994140625, ticks=2, turn=1.0}, Sample{deltaDeg=-12.142242431640625, ticks=2, turn=-1.0}, Sample{deltaDeg=25.86868286132813, ticks=3, turn=1.0}, Sample{deltaDeg=-21.771469116210945, ticks=3, turn=-1.0}, Sample{deltaDeg=25.174980163574233, ticks=3, turn=1.0}, Sample{deltaDeg=-34.30110931396486, ticks=3, turn=-1.0}, Sample{deltaDeg=53.016410827636726, ticks=4, turn=1.0}, Sample{deltaDeg=-30.318702697753906, ticks=4, turn=-1.0}, Sample{deltaDeg=29.284942626953125, ticks=4, turn=1.0}, Sample{deltaDeg=-20.92394256591796, ticks=4, turn=-1.0}, Sample{deltaDeg=50.17650604248046, ticks=5, turn=1.0}, Sample{deltaDeg=-51.226470947265625, ticks=5, turn=-1.0}, Sample{deltaDeg=50.51273345947266, ticks=5, turn=1.0}, Sample{deltaDeg=-51.95560455322266, ticks=5, turn=-1.0}, Sample{deltaDeg=75.75703430175781, ticks=6, turn=1.0}, Sample{deltaDeg=-59.61064147949219, ticks=6, turn=-1.0}, Sample{deltaDeg=58.06936645507812, ticks=6, turn=1.0}, Sample{deltaDeg=-50.46104431152343, ticks=6, turn=-1.0}, Sample{deltaDeg=81.11725616455078, ticks=7, turn=1.0}, Sample{deltaDeg=-72.93528747558595, ticks=7, turn=-1.0}, Sample{deltaDeg=72.29380035400389, ticks=7, turn=1.0}, Sample{deltaDeg=-62.67160797119139, ticks=7, turn=-1.0}, Sample{deltaDeg=93.71819305419925, ticks=8, turn=1.0}, Sample{deltaDeg=-83.00209045410156, ticks=8, turn=-1.0}, Sample{deltaDeg=88.15132141113281, ticks=8, turn=1.0}, Sample{deltaDeg=-80.41891479492185, ticks=8, turn=-1.0}, Sample{deltaDeg=106.36331176757815, ticks=9, turn=1.0}, Sample{deltaDeg=-96.80029296874999, ticks=9, turn=-1.0}, Sample{deltaDeg=87.63772583007814, ticks=9, turn=1.0}, Sample{deltaDeg=-85.86610412597659, ticks=9, turn=-1.0}, Sample{deltaDeg=111.78236389160159, ticks=10, turn=1.0}, Sample{deltaDeg=-105.1351013183594, ticks=10, turn=-1.0}, Sample{deltaDeg=112.43916320800781, ticks=10, turn=1.0}, Sample{deltaDeg=-107.2283172607422, ticks=10, turn=-1.0}, Sample{deltaDeg=107.84173583984378, ticks=11, turn=1.0}, Sample{deltaDeg=-115.81150817871092, ticks=11, turn=-1.0}, Sample{deltaDeg=111.93362426757815, ticks=11, turn=1.0}, Sample{deltaDeg=-114.65872192382814, ticks=11, turn=-1.0}, Sample{deltaDeg=137.1815948486328, ticks=12, turn=1.0}, Sample{deltaDeg=-113.92356872558595, ticks=12, turn=-1.0}, Sample{deltaDeg=115.71472167968749, ticks=12, turn=1.0}, Sample{deltaDeg=-135.0866241455078, ticks=12, turn=-1.0}, Sample{deltaDeg=136.60809326171875, ticks=13, turn=1.0}, Sample{deltaDeg=-137.6297607421875, ticks=13, turn=-1.0}, Sample{deltaDeg=153.1544342041016, ticks=13, turn=1.0}, Sample{deltaDeg=-151.48692321777344, ticks=13, turn=-1.0}, Sample{deltaDeg=158.39649963378906, ticks=14, turn=1.0}, Sample{deltaDeg=-161.4169464111328, ticks=14, turn=-1.0}, Sample{deltaDeg=146.01467895507815, ticks=14, turn=1.0}, Sample{deltaDeg=-143.4920806884766, ticks=14, turn=-1.0}, Sample{deltaDeg=166.19125366210938, ticks=15, turn=1.0}, Sample{deltaDeg=-167.9499969482422, ticks=15, turn=-1.0}, Sample{deltaDeg=168.67301940917972, ticks=15, turn=1.0}, Sample{deltaDeg=-161.69169616699222, ticks=15, turn=-1.0}, Sample{deltaDeg=168.45387268066406, ticks=16, turn=1.0}, Sample{deltaDeg=-182.45599365234375, ticks=16, turn=-1.0}, Sample{deltaDeg=174.03282165527344, ticks=16, turn=1.0}, Sample{deltaDeg=-187.20480346679688, ticks=16, turn=-1.0}, Sample{deltaDeg=193.09730529785153, ticks=17, turn=1.0}, Sample{deltaDeg=-188.264404296875, ticks=17, turn=-1.0}, Sample{deltaDeg=194.7863006591797, ticks=17, turn=1.0}, Sample{deltaDeg=-185.59352111816406, ticks=17, turn=-1.0}, Sample{deltaDeg=198.36231994628903, ticks=18, turn=1.0}, Sample{deltaDeg=-187.0519256591797, ticks=18, turn=-1.0}, Sample{deltaDeg=193.7417449951172, ticks=18, turn=1.0}, Sample{deltaDeg=-189.25233459472656, ticks=18, turn=-1.0}, Sample{deltaDeg=202.4083099365234, ticks=19, turn=1.0}, Sample{deltaDeg=-213.60023498535156, ticks=19, turn=-1.0}, Sample{deltaDeg=201.02059936523438, ticks=19, turn=1.0}, Sample{deltaDeg=-210.70848083496094, ticks=19, turn=-1.0}, Sample{deltaDeg=221.5565185546875, ticks=20, turn=1.0}, Sample{deltaDeg=-215.50559997558594, ticks=20, turn=-1.0}, Sample{deltaDeg=206.72337341308594, ticks=20, turn=1.0}, Sample{deltaDeg=-214.10614013671875, ticks=20, turn=-1.0}, Sample{deltaDeg=221.6125946044922, ticks=21, turn=1.0}, Sample{deltaDeg=-216.4618377685547, ticks=21, turn=-1.0}, Sample{deltaDeg=215.1558837890625, ticks=21, turn=1.0}, Sample{deltaDeg=-223.81396484374997, ticks=21, turn=-1.0}, Sample{deltaDeg=239.1144256591797, ticks=22, turn=1.0}, Sample{deltaDeg=-238.9812774658203, ticks=22, turn=-1.0}, Sample{deltaDeg=246.00900268554688, ticks=22, turn=1.0}, Sample{deltaDeg=-239.99647521972656, ticks=22, turn=-1.0}, Sample{deltaDeg=256.79078674316406, ticks=23, turn=1.0}, Sample{deltaDeg=-261.52449035644526, ticks=23, turn=-1.0}, Sample{deltaDeg=254.58683776855472, ticks=23, turn=1.0}, Sample{deltaDeg=-248.42166137695312, ticks=23, turn=-1.0}, Sample{deltaDeg=261.1809539794922, ticks=24, turn=1.0}, Sample{deltaDeg=-246.43016052246094, ticks=24, turn=-1.0}, Sample{deltaDeg=279.01354217529297, ticks=24, turn=1.0}, Sample{deltaDeg=-257.75960540771484, ticks=24, turn=-1.0}]
"""
deltaDegs = np.array([float(x) for x in re.findall(r"deltaDeg=([\w.-]+)", data)])
ticks = np.array([float(x) for x in re.findall(r"ticks=([\w.-]+)", data)])
turns = np.array([float(x) for x in re.findall(r"turn=([\w.-]+)", data)])

positive = turns>=0
negative = turns<=0
positive_m, positive_b = np.polyfit(ticks[positive],deltaDegs[positive],1)
negative_m, negative_b = np.polyfit(ticks[negative],deltaDegs[negative],1)

def plt_mxb(m,b):
    data = np.array([np.amin(ticks),np.amax(ticks)])
    plt.plot(data, data*m+b, '--')

print(positive_m,positive_b,negative_m,negative_b)

plt.scatter(ticks,deltaDegs)
plt_mxb(positive_m, positive_b)
plt_mxb(negative_m, negative_b)
plt.show()
